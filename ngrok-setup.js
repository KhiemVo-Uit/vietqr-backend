// Setup Ngrok Tool - T·ª± ƒë·ªông setup v√† c·∫≠p nh·∫≠t URLs

const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üåê NGROK SETUP TOOL FOR VIETQR');
console.log('==============================\n');

// Files c·∫ßn c·∫≠p nh·∫≠t ngrok URL
const filesToUpdate = [
  'test-ngrok-webhook.js',
  'quick-webhook-test.js', 
  'test-vietqr-callback.js',
  'test-qr-with-webhook.js'
];

async function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

function checkNgrokInstalled() {
  return new Promise((resolve) => {
    exec('ngrok version', (error) => {
      resolve(!error);
    });
  });
}

function startNgrok() {
  return new Promise((resolve, reject) => {
    console.log('\nüöÄ ƒêang kh·ªüi ƒë·ªông ngrok...');
    console.log('‚è≥ Vui l√≤ng ch·ªù v√†i gi√¢y...\n');
    
    const ngrok = spawn('ngrok', ['http', '3000'], {
      stdio: 'pipe'
    });
    
    let output = '';
    
    ngrok.stdout.on('data', (data) => {
      output += data.toString();
    });
    
    ngrok.stderr.on('data', (data) => {
      output += data.toString();
    });
    
    // ƒê·ª£i ngrok kh·ªüi ƒë·ªông
    setTimeout(() => {
      // L·∫•y th√¥ng tin tunnel t·ª´ ngrok API
      exec('curl -s http://localhost:4040/api/tunnels', (error, stdout) => {
        if (error) {
          reject('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin tunnel t·ª´ ngrok');
          return;
        }
        
        try {
          const tunnels = JSON.parse(stdout);
          const httpsTunnel = tunnels.tunnels.find(t => t.proto === 'https');
          
          if (httpsTunnel) {
            resolve({
              url: httpsTunnel.public_url,
              process: ngrok
            });
          } else {
            reject('Kh√¥ng t√¨m th·∫•y HTTPS tunnel');
          }
        } catch (parseError) {
          reject('L·ªói parse tunnel data');
        }
      });
    }, 5000); // ƒê·ª£i 5 gi√¢y cho ngrok kh·ªüi ƒë·ªông
  });
}

function updateFileWithNgrokUrl(filePath, newUrl) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    // Patterns ƒë·ªÉ t√¨m v√† replace ngrok URLs
    const patterns = [
      /const NGROK_URL = '[^']*'/g,
      /const NGROK_WEBHOOK_URL = '[^']*'/g,
      /https:\/\/[^.]*\.ngrok[^'"\s]*/g
    ];
    
    let updated = false;
    patterns.forEach(pattern => {
      if (pattern.test(content)) {
        if (filePath.includes('test-vietqr-callback.js')) {
          content = content.replace(
            /const NGROK_WEBHOOK_URL = '[^']*'/g,
            `const NGROK_WEBHOOK_URL = '${newUrl}/bank/api/transaction-sync'`
          );
        } else {
          content = content.replace(
            /const NGROK_URL = '[^']*'/g,
            `const NGROK_URL = '${newUrl}'`
          );
        }
        updated = true;
      }
    });
    
    if (updated) {
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ Updated: ${filePath}`);
    } else {
      console.log(`‚ö†Ô∏è  No ngrok URL found in: ${filePath}`);
    }
    
  } catch (error) {
    console.log(`‚ùå Error updating ${filePath}: ${error.message}`);
  }
}

function updateAllFiles(ngrokUrl) {
  console.log('\nüìù C·∫≠p nh·∫≠t ngrok URL trong c√°c file test...');
  
  filesToUpdate.forEach(file => {
    const filePath = path.join(__dirname, file);
    if (fs.existsSync(filePath)) {
      updateFileWithNgrokUrl(filePath, ngrokUrl);
    } else {
      console.log(`‚ö†Ô∏è  File not found: ${file}`);
    }
  });
}

async function showCurrentUrls() {
  console.log('\nüìã URLs hi·ªán t·∫°i trong c√°c file test:');
  console.log('=====================================');
  
  filesToUpdate.forEach(file => {
    const filePath = path.join(__dirname, file);
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      const urlMatch = content.match(/https:\/\/[^.]*\.ngrok[^'"\s]*/);
      if (urlMatch) {
        console.log(`üìÑ ${file}: ${urlMatch[0]}`);
      } else {
        console.log(`üìÑ ${file}: No ngrok URL found`);
      }
    }
  });
}

async function testConnection(ngrokUrl) {
  return new Promise((resolve) => {
    const testUrl = `${ngrokUrl}/api/token`;
    exec(`curl -s -o /dev/null -w "%{http_code}" "${testUrl}"`, (error, stdout) => {
      const statusCode = stdout.trim();
      const success = statusCode === '200';
      console.log(`üîó Test connection: ${testUrl}`);
      console.log(`üìä Status: ${statusCode} ${success ? '‚úÖ Success' : '‚ùå Failed'}`);
      resolve(success);
    });
  });
}

async function showWebhookInfo(ngrokUrl) {
  console.log('\nüéØ WEBHOOK INFORMATION:');
  console.log('======================');
  console.log(`üì° Ngrok Public URL: ${ngrokUrl}`);
  console.log(`üîó Webhook Endpoint: ${ngrokUrl}/bank/api/transaction-sync`);
  console.log('');
  console.log('üìù ƒê·ªÉ s·ª≠ d·ª•ng v·ªõi VietQR:');
  console.log(`   1. Copy URL n√†y: ${ngrokUrl}/bank/api/transaction-sync`);
  console.log('   2. D√πng l√†m webhookUrl khi t·∫°o QR');
  console.log('   3. VietQR s·∫Ω g·ª≠i callback ƒë·∫øn URL n√†y');
  console.log('');
  console.log('üß™ Test commands:');
  console.log('   npm run test:webhook   # Test ngrok webhook');
  console.log('   npm run test:quick     # Test QR + webhook');
  console.log('   npm run test:vietqr    # Test VietQR API');
  console.log('');
}

async function main() {
  try {
    // Ki·ªÉm tra ngrok ƒë√£ c√†i ƒë·∫∑t ch∆∞a
    const ngrokInstalled = await checkNgrokInstalled();
    
    if (!ngrokInstalled) {
      console.log('‚ùå Ngrok ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!');
      console.log('');
      console.log('üì• C√°ch c√†i ƒë·∫∑t:');
      console.log('1. npm install -g ngrok');
      console.log('2. Ho·∫∑c download t·ª´: https://ngrok.com/download');
      console.log('3. ƒêƒÉng k√Ω t√†i kho·∫£n t·∫°i: https://ngrok.com/');
      console.log('4. L·∫•y auth token v√† ch·∫°y: ngrok authtoken YOUR_TOKEN');
      console.log('');
      rl.close();
      return;
    }
    
    console.log('‚úÖ Ngrok ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t');
    
    // Hi·ªÉn th·ªã URLs hi·ªán t·∫°i
    await showCurrentUrls();
    
    console.log('\nüîß L·ª∞A CH·ªåN:');
    console.log('1. üöÄ Kh·ªüi ƒë·ªông ngrok m·ªõi v√† c·∫≠p nh·∫≠t URLs');
    console.log('2. ‚úèÔ∏è  Nh·∫≠p URL ngrok th·ªß c√¥ng');
    console.log('3. üìä Ch·ªâ hi·ªÉn th·ªã th√¥ng tin hi·ªán t·∫°i');
    console.log('0. ‚ùå Tho√°t');
    
    const choice = await askQuestion('\nüëâ Ch·ªçn h√†nh ƒë·ªông: ');
    
    switch (choice) {
      case '1':
        console.log('\n‚ö†Ô∏è  L∆ØU √ù: ƒê·∫£m b·∫£o server ƒëang ch·∫°y t·∫°i http://localhost:3000');
        const confirm = await askQuestion('Ti·∫øp t·ª•c? (y/n): ');
        
        if (confirm.toLowerCase() !== 'y') {
          console.log('üõë ƒê√£ h·ªßy');
          break;
        }
        
        try {
          const ngrokInfo = await startNgrok();
          console.log(`\n‚úÖ Ngrok ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!`);
          console.log(`üåê Public URL: ${ngrokInfo.url}`);
          
          // C·∫≠p nh·∫≠t files
          updateAllFiles(ngrokInfo.url);
          
          // Test connection
          console.log('\nüîç ƒêang test k·∫øt n·ªëi...');
          await testConnection(ngrokInfo.url);
          
          // Hi·ªÉn th·ªã th√¥ng tin webhook
          await showWebhookInfo(ngrokInfo.url);
          
          console.log('üí° Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng ngrok tunnel');
          console.log('üí° Gi·ªØ terminal n√†y m·ªü ƒë·ªÉ duy tr√¨ tunnel');
          
          // Gi·ªØ process ch·∫°y
          process.on('SIGINT', () => {
            console.log('\n\nüõë ƒêang d·ª´ng ngrok...');
            ngrokInfo.process.kill();
            rl.close();
            process.exit(0);
          });
          
          // Kh√¥ng ƒë√≥ng terminal
          setInterval(() => {}, 1000);
          
        } catch (error) {
          console.log(`‚ùå L·ªói kh·ªüi ƒë·ªông ngrok: ${error}`);
          console.log('\nüí° H∆∞·ªõng d·∫´n troubleshoot:');
          console.log('1. Ki·ªÉm tra server ƒëang ch·∫°y: http://localhost:3000');
          console.log('2. Ki·ªÉm tra auth token: ngrok authtoken YOUR_TOKEN');
          console.log('3. Th·ª≠ ch·∫°y th·ªß c√¥ng: ngrok http 3000');
        }
        break;
        
      case '2':
        const manualUrl = await askQuestion('\nüìù Nh·∫≠p ngrok URL (https://xxx.ngrok-free.app): ');
        
        if (!manualUrl.startsWith('https://')) {
          console.log('‚ùå URL ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng https://');
          break;
        }
        
        updateAllFiles(manualUrl);
        await showWebhookInfo(manualUrl);
        break;
        
      case '3':
        // ƒê√£ hi·ªÉn th·ªã ·ªü tr√™n
        break;
        
      case '0':
        console.log('üëã T·∫°m bi·ªát!');
        break;
        
      default:
        console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá');
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    if (rl && !rl.closed) {
      rl.close();
    }
  }
}

// Start the tool
main();
