// Script test h·ªá th·ªëng th√¥ng b√°o khi c√≥ thanh to√°n th√†nh c√¥ng

const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';
let accessToken = '';

// Test data giao d·ªãch th√†nh c√¥ng
const mockTransactionData = {
  transactionid: "TXN" + Date.now(),
  transactiontime: Math.floor(Date.now() / 1000),
  referencenumber: "REF" + Date.now(),
  amount: "500000", // 500,000 VNƒê
  content: "THANH TOAN DON HANG ABC123",
  bankaccount: "0123456789",
  orderId: "ORDER_" + Date.now(),
  sign: "test_signature",
  terminalCode: "VIETQR_TERMINAL",
  urlLink: "https://example.com/payment",
  serviceCode: "PAYMENT_SERVICE",
  subTerminalCode: "SUB_001"
};

// Function l·∫•y token
async function getToken() {
  try {
    console.log('üîë ƒêang l·∫•y access token...');
    
    const response = await axios.get(`${BASE_URL}/token`);
    
    if (response.data && !response.data.isError) {
      accessToken = response.data.token;
      console.log('‚úÖ ƒê√£ l·∫•y token th√†nh c√¥ng!');
      console.log('üìù Token:', accessToken.substring(0, 50) + '...');
      return true;
    } else {
      console.log('‚ùå L·ªói l·∫•y token:', response.data);
      return false;
    }
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi API token:', error.message);
    return false;
  }
}

// Function test webhook transaction-sync (gi·∫£ l·∫≠p callback t·ª´ VietQR)
async function testTransactionSync() {
  try {
    console.log('\nüéØ TESTING TRANSACTION SYNC & NOTIFICATION SYSTEM');
    console.log('==========================================');
    console.log('üí° Gi·∫£ l·∫≠p callback t·ª´ VietQR khi kh√°ch thanh to√°n...');
    
    console.log('\nüìä D·ªØ li·ªáu giao d·ªãch test:');
    console.log('- S·ªë ti·ªÅn:', Number(mockTransactionData.amount).toLocaleString('vi-VN'), 'VNƒê');
    console.log('- N·ªôi dung:', mockTransactionData.content);
    console.log('- T√†i kho·∫£n:', mockTransactionData.bankaccount);
    console.log('- Order ID:', mockTransactionData.orderId);
    
    // S·ª≠ d·ª•ng token th·∫≠t t·ª´ API thay v√¨ t·∫°o fake token
    const response = await axios.post(`http://localhost:3000/bank/api/transaction-sync`, mockTransactionData, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });
      if (response.data && !response.data.error) {
      console.log('\n‚úÖ Transaction sync th√†nh c√¥ng!');
      console.log('üì® H·ªá th·ªëng notification ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!');
      console.log('üîó Reference ID:', response.data.object?.reftransactionid || 'N/A');
      
      console.log('\nüéâ C√ÅC TH√îNG B√ÅO ƒê√É ƒê∆Ø·ª¢C G·ª¨I:');
      console.log('  1. ‚úÖ Log chi ti·∫øt tr√™n console');
      console.log('  2. üîä √Çm thanh th√¥ng b√°o');
      console.log('  3. üíæ Ghi log v√†o file transaction-logs.txt');
      console.log('  4. üìß Email notification (gi·∫£ l·∫≠p)');
      console.log('  5. üì± Telegram (n·∫øu ƒë√£ c·∫•u h√¨nh)');
      
    } else {
      console.log('‚ùå L·ªói transaction sync:', response.data);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói test transaction sync:', error.response?.data || error.message);
  }
}

// Function hi·ªÉn th·ªã logs ƒë√£ l∆∞u
function showTransactionLogs() {
  try {
    const fs = require('fs');
    const path = require('path');
    
    const logFile = path.join(__dirname, 'transaction-logs.txt');
    
    if (fs.existsSync(logFile)) {
      console.log('\nüìã TRANSACTION LOGS:');
      console.log('====================');
      
      const logs = fs.readFileSync(logFile, 'utf8')
        .split('\n')
        .filter(line => line.trim())
        .slice(-5); // Hi·ªÉn th·ªã 5 logs g·∫ßn nh·∫•t
      
      logs.forEach((log, index) => {
        try {
          const data = JSON.parse(log);
          console.log(`${index + 1}. ${data.timestamp}`);
          console.log(`   üí∞ ${Number(data.amount).toLocaleString('vi-VN')} VNƒê`);
          console.log(`   üÜî ${data.transactionId}`);
          console.log(`   üìù ${data.content}`);
          console.log('   ---');
        } catch (e) {
          // Skip invalid JSON lines
        }
      });
      
    } else {
      console.log('\nüìã Ch∆∞a c√≥ transaction logs n√†o.');
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói ƒë·ªçc logs:', error.message);
  }
}

// Main function
async function main() {
  console.log('üöÄ TESTING VIETQR NOTIFICATION SYSTEM');
  console.log('=======================================\n');
  
  // 1. L·∫•y token
  const tokenSuccess = await getToken();
  if (!tokenSuccess) {
    console.log('‚ùå Kh√¥ng th·ªÉ l·∫•y token. ƒê·∫£m b·∫£o server ƒëang ch·∫°y.');
    return;
  }
  
  // 2. Test transaction sync & notification
  await testTransactionSync();
  
  // 3. Hi·ªÉn th·ªã logs
  setTimeout(() => {
    showTransactionLogs();
    
    console.log('\nüéØ TEST HO√ÄN TH√ÄNH!');
    console.log('üí° ƒê·ªÉ nh·∫≠n th√¥ng b√°o Telegram th·∫≠t:');
    console.log('   1. T·∫°o bot: @BotFather -> /newbot');
    console.log('   2. Th√™m TELEGRAM_BOT_TOKEN v√† TELEGRAM_CHAT_ID v√†o .env');
    console.log('   3. Restart server v√† test l·∫°i');
    
  }, 2000);
}

// Ch·∫°y test
main().catch(console.error);
