const express = require('express');
const jwt = require('jsonwebtoken');
const {
  SuccessResponse,
  ErrorResponse,
  TransactionResponseObject,
  TransactionCallback
} = require('../models/responses');
const {
  sendTelegramMessage,
  sendEmailNotification,
  playNotificationSound,
  writeTransactionLog
} = require('../notification-service');

const router = express.Router();
const SECRET_KEY = process.env.SECRET_KEY;
const BEARER_PREFIX = 'Bearer ';

router.post('/transaction-sync', (req, res) => {
  const authHeader = req.headers['authorization'];
  if (!authHeader || !authHeader.startsWith(BEARER_PREFIX)) {
    return res.status(401).json(new ErrorResponse(true, "INVALID_AUTH_HEADER", "Authorization header is missing or invalid", null));
  }

  const token = authHeader.substring(BEARER_PREFIX.length).trim();

  try {
    // Th·ª≠ verify v·ªõi SECRET_KEY local tr∆∞·ªõc (cho test)
    let decoded;
    try {
      decoded = jwt.verify(token, SECRET_KEY);
    } catch (localError) {
      // N·∫øu kh√¥ng th√†nh c√¥ng, c√≥ th·ªÉ l√† token t·ª´ VietQR API (c·∫ßn decode kh√°c)
      // T·∫°m th·ªùi skip verify cho demo
      console.log('‚ö†Ô∏è Token kh√¥ng verify ƒë∆∞·ª£c v·ªõi local secret, ti·∫øp t·ª•c x·ª≠ l√Ω...');
      decoded = jwt.decode(token); // Decode m√† kh√¥ng verify
      
      if (!decoded) {
        throw new Error('Invalid token format');
      }
    }

    const body = req.body;
    const transaction = new TransactionCallback(
      body.transactionid, body.transactiontime, body.referencenumber,
      body.amount, body.content, body.bankaccount, body.orderId,
      body.sign, body.terminalCode, body.urlLink, body.serviceCode, body.subTerminalCode
    );    const refTransactionId = "REF" + Date.now();
    
    // üéâ TH√îNG B√ÅO THANH TO√ÅN TH√ÄNH C√îNG
    console.log('\nÔøΩ ===== TH√îNG B√ÅO THANH TO√ÅN TH√ÄNH C√îNG =====');
    console.log('ÔøΩ C√≥ kh√°ch h√†ng v·ª´a thanh to√°n!');
    console.log('‚è∞ Th·ªùi gian:', new Date(body.transactiontime * 1000).toLocaleString('vi-VN'));
    console.log('ÔøΩ S·ªë ti·ªÅn:', Number(body.amount).toLocaleString('vi-VN'), 'VNƒê');
    console.log('üí≥ T√†i kho·∫£n nh·∫≠n:', body.bankaccount);
    console.log('üÜî M√£ giao d·ªãch:', body.transactionid);
    console.log('ÔøΩ N·ªôi dung:', body.content);
    console.log('üè™ M√£ ƒë∆°n h√†ng:', body.orderId || 'Kh√¥ng c√≥');
    console.log('üîó Reference ID:', refTransactionId);
    console.log('===============================================');
    
    // G·ª≠i th√¥ng b√°o
    sendNotifications(transaction, refTransactionId);
    
    // TODO: L∆∞u v√†o database n·∫øu c·∫ßn
    // await saveTransactionToDatabase(transaction, refTransactionId);
    
    return res.status(200).json(new SuccessResponse(false, null, "Transaction processed successfully", new TransactionResponseObject(refTransactionId)));

  } catch (err) {
    return res.status(401).json(new ErrorResponse(true, "INVALID_TOKEN", "Invalid or expired token", null));
  }
});

// Function g·ª≠i th√¥ng b√°o khi c√≥ thanh to√°n th√†nh c√¥ng
async function sendNotifications(transaction, refId) {
  try {
    console.log('\nüì® ƒêANG G·ª¨I TH√îNG B√ÅO...');
    
    // ÔøΩ Ph√°t √¢m thanh ngay l·∫≠p t·ª©c
    playNotificationSound();
    
    // ÔøΩ Ghi log chi ti·∫øt
    writeTransactionLog(transaction, refId);
    
    // ÔøΩ G·ª≠i email (async)
    sendEmailNotification(transaction, refId);
      // üí¨ G·ª≠i Telegram (async) - t·ª± ƒë·ªông ki·ªÉm tra c·∫•u h√¨nh
    await sendTelegramMessage(transaction, refId);
    
    console.log('‚úÖ ƒê√£ k√≠ch ho·∫°t t·∫•t c·∫£ th√¥ng b√°o!\n');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i th√¥ng b√°o:', error.message);
  }
}

module.exports = router;
